# -*- coding: utf-8 -*-
"""Best Book selling Analysis-Amazon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Buh-XaQFiWv0qYrAGjryDnQvnXepijlC

Connecting Drive (data storage workspace) with Google colab
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive/')
# %cd /gdrive

ls

cd/gdrive/My Drive/Book Selling Analysis/

ls

"""Import Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
import warnings
sns.set(style="white")
import plotly
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

"""Data Uplodation"""

data = pd.read_csv('bestsellers.csv')

data.head(10)

data.info()

"""Numeric Column"""

for column in data.select_dtypes(include=[np.number]).columns:
    print(column)

data.describe()

data.isnull().sum()

"""EDA"""

from typing import List
def plot_histogram(data_frame: str=data):    
    # selecting names of numeric columns
    columns_to_plot: List[str] = data_frame.select_dtypes(include=[np.number]).columns     
    # iterating over every numeric column
    for column in columns_to_plot:
        fig = px.histogram(data_frame=data_frame, x=column)        
        fig.update_layout(title=dict(text=column, x=0.5)) # x parameter sets position of the title
        fig.show()

plot_histogram()

"""distribution of fiction and non-fiction bestsellers changed over the years"""

grouped_by_year_and_genre = (data.groupby(['Year', 'Genre'])
                             .count()
                             .reset_index()
                             # renaming colum
                            .rename(columns={'Name': 'count'}))
# visualization
fig = px.bar(data_frame=grouped_by_year_and_genre, 
             x='Year', y='count',
             color='Genre',
            barmode='group')            
fig.update_layout(title=dict(text='<b>Bestsellers over years with genre - Amazon<b>',
                            x=0.5, font=dict(size=24)),
                  font=dict(family='Lato',
                           size=16))
fig

# Single year analysis
year_2014 = data[data['Year'] == 2014]
g = sns.FacetGrid(year_2014, col='Genre', xlim=(0, 5e4)) 
g.map(sns.kdeplot, 'Reviews')

g = sns.FacetGrid(year_2014, col='Genre')
g.map(sns.kdeplot, 'Price')

g = sns.FacetGrid(year_2014, col='Genre')
g.map(sns.kdeplot, 'User Rating')

fiction_2014 = year_2014[year_2014['Genre'] == 'Fiction']
non_fiction_2014 = year_2014[year_2014['Genre'] == 'Non Fiction']

fig = make_subplots(rows=1, cols=2, column_titles=['Fiction', 'Non-fiction'],
                   shared_yaxes=True)
# adding trace with fiction authors
fig.add_trace(go.Bar(x=fiction_2014['Author'].value_counts().index[:5],
                    y=fiction_2014['Author'].value_counts().values[:5],
                    showlegend=False),
              row=1,col=1)
# adding non-fiction authors
fig.add_trace(go.Bar(x=non_fiction_2014['Author'].value_counts().index[:5],
                    y=non_fiction_2014['Author'].value_counts().values[:5],
                    showlegend=False),row=1,col=2)
# some styling
fig.update_layout(yaxis=dict(range=[0.1, 3], dtick=1),
                 title=dict(text='<b>Bestsellers authors in 2014 with genre - Amazon<b>',
                            font=dict(size=24),
                           x=0.5),
                 font=dict(family='Lato', size=16))

data[data['Author'] == 'John Green']

"""Author has the biggest amount of bestsellers - Top10"""

fig = px.bar(x=data['Author'].value_counts().index[:10],
            y=data['Author'].value_counts().values[:10])
fig.update_layout(xaxis=dict(title='author'),
                 yaxis=dict(title='amount of books'),
                 font=dict(family='Lato', size=16),
                 title=dict(text='<b>Authorwise amount of bestsellers<b>',
                            font=dict(size=24),x=.5))

"""Book price correlation with book rating"""

data.corr()

fig = px.scatter(data_frame=data, x='Price',y='User Rating')
fig

"""% of book available free of cost"""

data['free_or_not_free'] = data['Price'].apply(lambda price:  'free' if not price else 'not free')

fig = go.Figure()
colors = ['lime', 'grey']
fig = fig.add_trace(
                        go.Pie(labels=data['free_or_not_free'].
                           value_counts().index, 
                           values=data['free_or_not_free'].
                           value_counts().values,
                        hoverinfo='label+percent',
                        textinfo='percent',
                        textfont=dict(size=14, color='black'),
                        marker=dict(colors=colors,line=dict(width=2)), hole=0.7))
fig.update_layout(
    font=dict(family='Lato', size=16, color='black'),
    title=dict(text='<b>STATS of BESTSELLERS - AMAZON<b>', font=dict(size=24),x=0.5),plot_bgcolor='white'
)

"""Fiction"""

np.mean(data.loc[data['Genre'] == 'Fiction', 'Price'])

"""Non-Fiction"""

np.mean(data.loc[data['Genre'] == 'Non Fiction', 'Price'])

"""Conclusion"""

print("Fiction books are at average cheaper than non fiction books.")

